{
	//#region  //*=========== JS ===========
	"Console Log": {
		"prefix": "clg",
		"body": ["console.log($1)"]
	},
	"Console Error": {
		"prefix": "cle",
		"body": ["console.error($1)"]
	},
	//#region  //*=========== JS ===========

	//#region  //*=========== React ===========
	"import React": {
		"prefix": "imr",
		"body": ["import * as React from 'react';"]
	},
	"React.useState": {
		"prefix": "us",
		"body": [
			"const [${1}, set${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}] = React.useState<$3>(${2:initial${1/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}})$0"
		]
	},
	"React.useEffect": {
		"prefix": "usef",
		"body": ["React.useEffect(() => {", "  $0", "}, []);"]
	},
	"React.useReducer": {
		"prefix": "usr",
		"body": [
			"const [state, dispatch] = React.useReducer(${0:someReducer}, {",
			"  ",
			"})"
		]
	},
	"React.useRef": {
		"prefix": "usrf",
		"body": ["const ${1:someRef} = React.useRef($0)"]
	},
	"React Functional Component": {
		"prefix": "rfc",
		"body": [
			"import * as React from 'react';\n",
			"const ${1:${TM_FILENAME_BASE}} = () => {",
			"  return (",
			"    <div$2>",
			"      $3",
			"    </div>",
			"  )",
			"}\n",
			"export default ${1:${TM_FILENAME_BASE}}"
		]
	},
	"React Functional Component with Props": {
		"prefix": "rfcp",
		"body": [
			"import * as React from 'react';\n",
			"import clsxm from '@/lib/clsxm';\n",
			"export interface ${1:${TM_FILENAME_BASE}}Props {",
			"$4",
			"}\n",
			"const ${1:${TM_FILENAME_BASE}}: React.FC<${1:${TM_FILENAME_BASE}}Props> = ({$5}) => {",
			"  return (",
			"    <div$2 className={clsxm('')}>",
			"      $3",
			"    </div$2>",
			"  )",
			"}\n",
			"export default ${1:${TM_FILENAME_BASE}}"
		]
	},
	//#endregion  //*======== React ===========

	//#region  //*=========== Commons ===========
	"Region": {
		"prefix": "reg",
		"scope": "javascript, typescript, javascriptreact, typescriptreact",
		"body": [
			"//#region  //*=========== ${1} ===========",
			"${TM_SELECTED_TEXT}$0",
			"//#endregion  //*======== ${1} ==========="
		]
	},
	"Region CSS": {
		"prefix": "regc",
		"scope": "css, scss",
		"body": [
			"/* #region  /**=========== ${1} =========== */",
			"${TM_SELECTED_TEXT}$0",
			"/* #endregion  /**======== ${1} =========== */"
		]
	},
	//#endregion  //*======== Commons ===========

	//#region  //*=========== Nextjs ===========
	"Next Page Typescript": {
		"prefix": "npts",
		"body": [
			"import * as React from 'react';\n",
			"import AppLayout from '@/components/layouts/AppLayout';\n",
			"import { NextPageWithLayout } from '@/pages/page';\n",
			"const ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Page: NextPageWithLayout = () => {",
			"  return (",
			"    <section className=''>",
			"      $0",
			"    </section>",
			"  )",
			"}\n",
			"${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Page.getLayout = (page) => {",
			"  return <AppLayout>{page}</AppLayout>;",
			"};\n",
			"export default ${1:${TM_FILENAME_BASE/(^[a-zA-Z])(.*)/${1:/upcase}${2}/}}Page;"
		]
	},
	"Next API": {
		"prefix": "napi-get",
		"body": [
			"import { NextApiRequest, NextApiResponse } from 'next';\n",
			"export default async function ${1:${TM_FILENAME_BASE}}(req: NextApiRequest, res: NextApiResponse) {",
			"  if (req.method === 'GET') {",
			"    res.status(200).json({ name: 'Asloleee' });",
			"  } else {",
			"    res.status(405).json({ message: 'Method Not Allowed' });",
			"  }",
			"}"
		]
	},
	"Get Static Props": {
		"prefix": "gsp",
		"body": [
			"export const getStaticProps = async (context: GetStaticPropsContext) => {",
			"  return {",
			"    props: {}",
			"  };",
			"}"
		]
	},
	"Get Static Paths": {
		"prefix": "gspa",
		"body": [
			"export const getStaticPaths: GetStaticPaths = async () => {",
			"  return {",
			"    paths: [",
			"      { params: { $1 }}",
			"    ],",
			"    fallback: ",
			"  };",
			"}"
		]
	},
	"Get Server Side Props": {
		"prefix": "gssp",
		"body": [
			"export const getServerSideProps = async (context: GetServerSidePropsContext) => {",
			"  return {",
			"    props: {}",
			"  };",
			"}"
		]
	},
	"Infer Get Static Props": {
		"prefix": "igsp",
		"body": "InferGetStaticPropsType<typeof getStaticProps>"
	},
	"Infer Get Server Side Props": {
		"prefix": "igssp",
		"body": "InferGetServerSidePropsType<typeof getServerSideProps>"
	},
	"Import useRouter": {
		"prefix": "imust",
		"body": ["import { useRouter } from 'next/router';"]
	},
	"Import Next Image": {
		"prefix": "imimg",
		"body": ["import Image from 'next/image';"]
	},
	"Import Next Link": {
		"prefix": "iml",
		"body": ["import Link from 'next/link';"]
	},
	//#endregion  //*======== Nextjs ===========

	//#region  //*=========== Snippet Wrap ===========
	"Wrap with Fragment": {
		"prefix": "ff",
		"body": ["<>", "\t${TM_SELECTED_TEXT}", "</>"]
	},
	"Wrap with clsx": {
		"prefix": "cx",
		"body": ["{clsx(${TM_SELECTED_TEXT}$0)}"]
	},
	"Wrap with clsxm": {
		"prefix": "cxm",
		"body": ["{clsxm(${TM_SELECTED_TEXT}$0, className)}"]
	}
	//#endregion  //*======== Snippet Wrap ===========
}
